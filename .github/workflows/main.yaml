name: Push Docker Image to Amazon ECR
on:
  push:
    branches: [ "main" ]

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    steps:
        - name: Checkout
          uses: actions/checkout@v2

        - name: Setup AWS ECR Details
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{secrets.AWS_REGION}}


        - name: Login to Amazon ECR
          id: login-pf-aws-ecr
          uses: aws-actions/amazon-ecr-login@v1


        - name: Build and push the tagged docker image to Amazon ECR
          env:
            ECR_REGISTRY: ${{ steps.login-pf-aws-ecr.outputs.registry }}
            ECR_REPOSITORY: ${{secrets.AWS_ECR_REPO}}
            IMAGE_TAG: latest
          run: |
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy:
    name: Deploy Docker Image to AWS Instance
    runs-on: ubuntu-latest
    needs: build
    env:
      INSTANCE_ID_1: ${{ secrets.INSTANCE_ID_1 }}
      INSTANCE_ID_2: ${{ secrets.INSTANCE_ID_2 }}
      CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}
    steps:
        - name: Execute Docker Commands on AWS Instance to deploy the application
          env:
            ECR_IMAGE_TO_DEPLOY: ${{ steps.login-pf-aws-ecr.outputs.registry }}/${{secrets.AWS_ECR_REPO}}:latest
          run: |
            command_id=$(aws ssm send-command \
              --targets Key=InstanceIds,Values=${{ env.INSTANCE_ID_1 }},${{ env.INSTANCE_ID_2 }} \
              --document-name "AWS-RunShellScript" \
              --comment "Executing Docker operations" \
              --parameters commands='[
                "set -e",
                "trap '\''echo DOCKER_STOP_FAILURE 1>&2'\'' ERR; if docker ps --format '\''{{.Names}}'\'' | grep -q ${{ env.CONTAINER_NAME }}; then docker stop ${{ env.CONTAINER_NAME }}; fi",
                "trap '\''echo DOCKER_RENAME_FAILURE 1>&2'\'' ERR; if docker ps -a --format '\''{{.Names}}'\'' | grep -q ${{ env.CONTAINER_NAME }}; then docker rename ${{ env.CONTAINER_NAME }} ${{ env.CONTAINER_NAME }}-${{github.run_id}}; fi",
                "trap '\''echo DOCKER_LOGIN_FAILURE 1>&2'\'' ERR; aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_IMAGE_TO_DEPLOY }}",
                "trap '\''echo DOCKER_PULL_FAILURE 1>&2'\'' ERR; docker pull ${{ env.ECR_IMAGE_TO_DEPLOY }}",
                "trap '\''echo DOCKER_RUN_FAILURE 1>&2'\'' ERR; docker run -d -p 3000:3000 --name ${{ env.CONTAINER_NAME }} ${{ env.ECR_IMAGE_TO_DEPLOY }}"
              ]' --query 'Command.CommandId' --output text)

            echo "command_id=$command_id" >> $GITHUB_ENV

        - name: Retrieve and Store SSM Command Results
          run: |
            aws ssm wait command-executed \
              --command-id ${{ env.command_id }} \
              --instance-id ${{ env.INSTANCE_ID_1 }} || true
            ssm_command_output=$(aws ssm get-command-invocation \
                  --command-id ${{ env.command_id }} \
                  --instance-id ${{ env.INSTANCE_ID_1 }})

            standard_error_content=$(echo "$ssm_command_output" | jq -r '.StandardErrorContent')
            standard_error_content=${standard_error_content//$'\n'/' '}
            status=$(echo "$ssm_command_output" | jq -r '.Status')

            echo "status=$status" >> $GITHUB_ENV
            echo "standard_error_content=$standard_error_content" >> $GITHUB_ENV

        - name: Check Docker Command Success and Remove Old Container
          id: handle_docker_results
          run: |
            if [[ "${{ env.status }}" == "Success" ]]; then
              echo "Commands completed successfully."
              echo "Deleting renamed old container"
              removeOldContainerCommandId=$(aws ssm send-command \
                --targets Key=InstanceIds,Values=${{ env.INSTANCE_ID_1 }},${{ env.INSTANCE_ID_2 }} \
                --document-name "AWS-RunShellScript" \
                --comment "Deploy test-application" \
                --parameters commands='[
                  "set -e",
                  "trap '\''echo DOCKER_RM_FAILURE 1>&2'\'' ERR; docker rm ${{ secrets.CONTAINER_NAME }}-${{github.run_id}}"
                ]' --query 'Command.CommandId' --output text)

              echo "Waiting for removal of renamed old container to complete..."
              aws ssm wait command-executed \
                --command-id "$removeOldContainerCommandId" \
                --instance-id ${{ env.INSTANCE_ID_1 }} || true

              echo "Fetching container removal details..."
              removeContainerInvocation=$(aws ssm get-command-invocation \
                  --command-id "$removeOldContainerCommandId" \
                  --instance-id ${{ env.INSTANCE_ID_1 }})

              removeContainerInvocationStatus=$(echo $removeContainerInvocation | jq -r '.Status')

              if [[ $removeContainerInvocationStatus == "Success" ]]; then
                echo "Removal of renamed old container completed successfully."
              else
                error_content=$(echo $removeContainerInvocation | jq -r '.StandardErrorContent')
                echo "Container removal failed with error: ${error_content}"
              fi
            fi

        - name: Check Docker Command Failures and rollback if needed
          if: env.status == 'Failed'
          run: |
            echo "error_content: ${{ env.standard_error_content }}"

            if echo "${{ env.standard_error_content }}" | grep -Eq "DOCKER_RUN_FAILURE|DOCKER_PULL_FAILURE"; then
              echo "Docker run command failed"

              echo "Handling Docker run failure..."
                echo "Rollback initiated..."
                rollbackId=$(aws ssm send-command \
                  --targets Key=InstanceIds,Values=${{ env.INSTANCE_ID_1 }},${{ env.INSTANCE_ID_2 }} \
                  --document-name "AWS-RunShellScript" \
                  --comment "Rollback to previous container version" \
                  --parameters commands='[
                    "set -e",
                    "trap '\''echo DOCKER_RENAME_FAILURE 1>&2'\'' ERR; docker rename ${{ secrets.CONTAINER_NAME }}-${{github.run_id}} ${{ secrets.CONTAINER_NAME }}",
                    "trap '\''echo DOCKER_RESTART_FAILURE 1>&2'\'' ERR; docker restart ${{ secrets.CONTAINER_NAME }}",
                  ]' --query 'Command.CommandId' --output text)

                echo "Waiting for rollback to get completed..."
                aws ssm wait command-executed \
                  --command-id "$rollbackId" \
                  --instance-id ${{ env.INSTANCE_ID_1 }} || true

                echo "Fetching rollback details..."
                rollbackInvocation=$(aws ssm get-command-invocation \
                  --command-id "$rollbackId" \
                  --instance-id ${{ env.INSTANCE_ID_1 }})

                rollbackstatus=$(echo $rollbackInvocation | jq -r '.Status')

                if [[ $rollbackstatus == "Success" ]]; then
                  echo "Rollback completed: $rollbackstatus"
                else
                  error_content=$(echo $rollbackInvocation | jq -r '.StandardErrorContent')
                  echo "Rollback failed with error: ${error_content}"
                fi
                exit 1

            else
              echo "Command did not complete successfully."
              echo "Error details: ${{ env.standard_error_content }}"
              exit 1
            fi