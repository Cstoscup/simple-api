name: Push Docker Image to Amazon ECR
on:
  push:
    branches: [ "main" ]
jobs:
  build:
    name: Build and Deploy Docker Image
    runs-on: ubuntu-latest
    env:
      INSTANCE_ID_1: ${{ secrets.INSTANCE_ID_1 }}
      INSTANCE_ID_2: ${{ secrets.INSTANCE_ID_2 }}
      CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}
    outputs:
      output1: ${{ steps.build.outputs.test }}
    steps:
        - name: Checkout
          uses: actions/checkout@v2
        - name: Setup AWS ECR Details
          uses: aws-actions/configure-aws-credentials@v4
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{secrets.AWS_REGION}}
        - name: Login to Amazon ECR
          id: login-aws-ecr
          uses: aws-actions/amazon-ecr-login@v2
        - name: Build and push the tagged docker image to Amazon ECR
          id: build
          env:
            ECR_REGISTRY: ${{ steps.login-aws-ecr.outputs.registry }}
            ECR_REPOSITORY: ${{secrets.AWS_ECR_REPO}}
            IMAGE_TAG: latest
          run: |
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            URL="echo -n $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG | base64 -w 0"
            echo -n "test=$URL" >> $GITHUB_OUTPUT

  deploy:
      name: Deploy Docker Image to EC2 Instances
      runs-on: ubuntu-latest
      needs: build
      env:
        INSTANCE_ID_1: ${{ secrets.INSTANCE_ID_1 }}
        INSTANCE_ID_2: ${{ secrets.INSTANCE_ID_2 }}
      steps:
        - name: Configure AWS Credentials
          uses: aws-actions/configure-aws-credentials@v4
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{secrets.AWS_REGION}}
        - name: Log into Amazon ECR
          id: login-aws-ecr
          uses: aws-actions/amazon-ecr-login@v2
        - name: Pull and Run ECR Images on EC2 Instances
          env:
            ECR_IMAGE_TO_DEPLOY: ${{ steps.login-aws-ecr.outputs.registry }}/${{secrets.AWS_ECR_REPO}}:latest
            CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}
          run: |
            command_id=$(aws ssm send-command \
              --targets Key=InstanceIds,Values=${{ env.INSTANCE_ID_1 }},${{ env.INSTANCE_ID_2 }} \
              --document-name "AWS-RunShellScript" \
              --comment "Executing Docker operations" \
              --parameters commands='[
                "set -e",
                "docker stop ${{ env.CONTAINER_NAME }} || true",
                "trap '\''echo DOCKER_LOGIN_FAILURE 1>&2'\'' ERR; aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_IMAGE_TO_DEPLOY }}",
                "trap '\''echo DOCKER_PULL_FAILURE 1>&2'\'' ERR; docker pull ${{ env.ECR_IMAGE_TO_DEPLOY }}",
                "trap '\''echo DOCKER_RUN_FAILURE 1>&2'\'' ERR; docker run --rm -d -p 3000:3000 --name ${{ env.CONTAINER_NAME }} ${{ env.ECR_IMAGE_TO_DEPLOY }}"
              ]'
              --query 'Command.CommandId' --output text)

            echo "command_id=$command_id" >> $GITHUB_ENV
        - name: Wait for Docker Commands to Complete on Instance 1
          run: |
            aws ssm wait command-executed \
              --command-id ${{ env.command_id }} \
              --instance-id ${{ env.INSTANCE_ID_1 }} || true
        - name: Get Docker Command Output
          run: |
            ssm_command_output=$(aws ssm get-command-invocation \
                  --command-id ${{ env.command_id }} \
                  --instance-id ${{ env.INSTANCE_ID_1 }})

            standard_error_content=$(echo "$ssm_command_output" | jq -r '.StandardErrorContent')
            status=$(echo "$ssm_command_output" | jq -r '.Status')

            echo "status=$status" >> $GITHUB_ENV
            echo "standard_error_content=$standard_error_content" >> $GITHUB_ENV
        - name: Check Docker Command Success
          id: handle_docker_results
          run: |
            if [[ "${{ env.status }}" == "Success" ]]; then
              echo "Commands completed successfully on instance 1."
            else
              echo "Commands failed."
              echo "Error details: ${{ env.standard_error_content }}"
              exit 1
            fi
        - name: Wait for Docker Commands to Complete on Instance 2
          run: |
            aws ssm wait command-executed \
              --command-id ${{ env.command_id }} \
              --instance-id ${{ env.INSTANCE_ID_2 }} || true
        - name: Get Docker Command Output
          run: |
            ssm_command_output=$(aws ssm get-command-invocation \
                  --command-id ${{ env.command_id }} \
                  --instance-id ${{ env.INSTANCE_ID_2 }})

            standard_error_content=$(echo "$ssm_command_output" | jq -r '.StandardErrorContent')
            status=$(echo "$ssm_command_output" | jq -r '.Status')

            echo "status=$status" >> $GITHUB_ENV
            echo "standard_error_content=$standard_error_content" >> $GITHUB_ENV
        - name: Check Docker Command Success
          id: handle_docker_results
          run: |
            if [[ "${{ env.status }}" == "Success" ]]; then
              echo "Commands completed successfully on instance 2."
            else
              echo "Commands failed."
              echo "Error details: ${{ env.standard_error_content }}"
              exit 1
            fi
