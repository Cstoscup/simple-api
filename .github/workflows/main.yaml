name: Push Docker Image to Amazon ECR
on:
  push:
    branches: [ "main" ]
jobs:
  build-api:
    name: Build and Push
    runs-on: ubuntu-latest
    steps:
        - name: Checkout
          uses: actions/checkout@v2
        - name: Configure AWS Credentials
          uses: aws-actions/configure-aws-credentials@v4
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{secrets.AWS_REGION}}
        - name: Log into Amazon ECR
          id: login-aws-ecr
          uses: aws-actions/amazon-ecr-login@v2
        - name: Build and push the tagged docker image to Amazon ECR
          id: build
          env:
            ECR_IMAGE: ${{ steps.login-aws-ecr.outputs.registry }}/${{secrets.API_IMAGE_REPO}}:latest
          run: |
            docker build -t ${{ env.ECR_IMAGE }} ./api
            docker push ${{ env.ECR_IMAGE }}

  deploy:
      name: Deploy
      runs-on: ubuntu-latest
      needs: build-api
      env:
        INSTANCE_ID_1: ${{ secrets.INSTANCE_ID_1 }}
        INSTANCE_ID_2: ${{ secrets.INSTANCE_ID_2 }}
      steps:
        - name: Configure AWS Credentials
          uses: aws-actions/configure-aws-credentials@v4
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{secrets.AWS_REGION}}
        - name: Log into Amazon ECR
          id: login-aws-ecr
          uses: aws-actions/amazon-ecr-login@v2
        - name: Pull and Run ECR Images on EC2 Instances
          env:
            ECR_IMAGE_TO_DEPLOY: ${{ steps.login-aws-ecr.outputs.registry }}/${{secrets.API_IMAGE_REPO}}:latest
            CONTAINER_NAME: ${{ secrets.API_CONTAINER_NAME }}
          run: |
            command_id=$(aws ssm send-command \
              --targets Key=InstanceIds,Values=${{ env.INSTANCE_ID_1 }},${{ env.INSTANCE_ID_2 }} \
              --document-name "AWS-RunShellScript" \
              --comment "Executing Docker operations" \
              --parameters commands='[
                "set -e",
                "docker stop ${{ env.CONTAINER_NAME }} || true",
                "aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_IMAGE_TO_DEPLOY }}",
                "docker pull ${{ env.ECR_IMAGE_TO_DEPLOY }}",
                "docker run --rm -d -p 3000:3000 -e DB_HOST=${{secrets.DB_HOST}} -e DB_USERNAME=${{secrets.DB_USERNAME}} -e DB_PASSWORD=${{secrets.DB_PASSWORD}} -e ENVIRONMENT=${{secrets.ENVIRONMENT}} --name ${{ env.CONTAINER_NAME }} ${{ env.ECR_IMAGE_TO_DEPLOY }}"
              ]' --query 'Command.CommandId' --output text)

            echo "command_id=$command_id" >> $GITHUB_ENV
        - name: Wait for Docker Commands to Complete
          run: |
            aws ssm wait command-executed \
              --command-id ${{ env.command_id }} \
              --instance-id ${{ env.INSTANCE_ID_1 }} || true
        - name: Get Deployment Command Status
          run: |
            ssm_command_output=$(aws ssm list-commands --command-id ${{ env.command_id }} --query 'Commands[0].Status' --output text)
            echo "status=$ssm_command_output" >> $GITHUB_ENV
        - name: Check Deployment Status
          run: |
            if [[ "${{ env.status }}" == "Success" ]]; then
              echo "Your API was deployed successfully"
            else
              echo "Your deployment failed...time to start debugging!"
              exit 1
            fi